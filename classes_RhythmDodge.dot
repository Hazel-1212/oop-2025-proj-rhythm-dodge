digraph "classes_RhythmDodge" {
rankdir=BT
charset="utf-8"
"obstacle.CannonObstacle" [color="black", fontcolor="black", label=<{CannonObstacle|expired : bool<br ALIGN="LEFT"/>h<br ALIGN="LEFT"/>hitbox_type : str<br ALIGN="LEFT"/>magnitude : int<br ALIGN="LEFT"/>num_bars<br ALIGN="LEFT"/>rect<br ALIGN="LEFT"/>shake_duration : int<br ALIGN="LEFT"/>state : str<br ALIGN="LEFT"/>vx<br ALIGN="LEFT"/>vy<br ALIGN="LEFT"/>w<br ALIGN="LEFT"/>wave_amplitude<br ALIGN="LEFT"/>wave_damaged : bool<br ALIGN="LEFT"/>wave_dir : NoneType, str<br ALIGN="LEFT"/>wave_length<br ALIGN="LEFT"/>wave_origin : NoneType, tuple<br ALIGN="LEFT"/>wave_progress : int<br ALIGN="LEFT"/>wave_rects : list<br ALIGN="LEFT"/>wave_speed : float<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|check_player_hit(player)<br ALIGN="LEFT"/>draw(screen)<br ALIGN="LEFT"/>generate_wave_rects()<br ALIGN="LEFT"/>shake(duration, magnitude)<br ALIGN="LEFT"/>update(screen, player)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"obstacle.CircleObstacle" [color="black", fontcolor="black", label=<{CircleObstacle|radius<br ALIGN="LEFT"/>shake_duration : int<br ALIGN="LEFT"/>|collide(player)<br ALIGN="LEFT"/>draw(screen)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"obstacle.FollowCircleObstacle" [color="black", fontcolor="black", label=<{FollowCircleObstacle|<br ALIGN="LEFT"/>|update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"obstacle.FollowGearObstacle" [color="black", fontcolor="black", label=<{FollowGearObstacle|rotation<br ALIGN="LEFT"/>vx<br ALIGN="LEFT"/>vy<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"obstacle.FollowObstacle" [color="black", fontcolor="black", label=<{FollowObstacle|<br ALIGN="LEFT"/>|update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"obstacle.GearObstacle" [color="black", fontcolor="black", label=<{GearObstacle|color : tuple<br ALIGN="LEFT"/>hitbox_type : str<br ALIGN="LEFT"/>radius<br ALIGN="LEFT"/>rect<br ALIGN="LEFT"/>rotation : int<br ALIGN="LEFT"/>rotation_speed : int<br ALIGN="LEFT"/>shake_duration : int<br ALIGN="LEFT"/>shake_magnitude : int<br ALIGN="LEFT"/>teeth : int<br ALIGN="LEFT"/>vx<br ALIGN="LEFT"/>vy<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|draw(screen)<br ALIGN="LEFT"/>shake(duration, magnitude)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"obstacle.LaserCircleObstacle" [color="black", fontcolor="black", label=<{LaserCircleObstacle|activate_time<br ALIGN="LEFT"/>activated : bool<br ALIGN="LEFT"/>alpha : int<br ALIGN="LEFT"/>charge_time<br ALIGN="LEFT"/>duration : int<br ALIGN="LEFT"/>effect_playing : bool<br ALIGN="LEFT"/>expired : bool<br ALIGN="LEFT"/>line_width : int<br ALIGN="LEFT"/>sound : bool<br ALIGN="LEFT"/>spawn_time<br ALIGN="LEFT"/>stage : int<br ALIGN="LEFT"/>transition_progress : int<br ALIGN="LEFT"/>|draw(screen)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"obstacle.LaserObstacle" [color="black", fontcolor="black", label=<{LaserObstacle|activate_time<br ALIGN="LEFT"/>activated : bool<br ALIGN="LEFT"/>alpha : int<br ALIGN="LEFT"/>charge_time<br ALIGN="LEFT"/>duration : int<br ALIGN="LEFT"/>effect_playing : bool<br ALIGN="LEFT"/>expired : bool<br ALIGN="LEFT"/>line_width : int<br ALIGN="LEFT"/>shake_duration<br ALIGN="LEFT"/>shaker : bool<br ALIGN="LEFT"/>sound : bool<br ALIGN="LEFT"/>spawn_time<br ALIGN="LEFT"/>stage : int<br ALIGN="LEFT"/>transition_progress : int<br ALIGN="LEFT"/>|draw(screen)<br ALIGN="LEFT"/>get_centered_line_rect(width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"screens.win_screen.Note" [color="black", fontcolor="black", label=<{Note|char : str<br ALIGN="LEFT"/>color : tuple<br ALIGN="LEFT"/>font : Font<br ALIGN="LEFT"/>size : int<br ALIGN="LEFT"/>speed<br ALIGN="LEFT"/>x : int<br ALIGN="LEFT"/>y : int<br ALIGN="LEFT"/>|draw(surface)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"obstacle.Obstacle" [color="black", fontcolor="black", label=<{Obstacle|color : tuple<br ALIGN="LEFT"/>magnitude : int<br ALIGN="LEFT"/>rect<br ALIGN="LEFT"/>shake_duration : int<br ALIGN="LEFT"/>vx<br ALIGN="LEFT"/>vy<br ALIGN="LEFT"/>|draw(screen)<br ALIGN="LEFT"/>shake(duration, magnitude)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"particle.Particle" [color="black", fontcolor="black", label=<{Particle|color : tuple<br ALIGN="LEFT"/>life : int<br ALIGN="LEFT"/>max_life : int<br ALIGN="LEFT"/>pos : list<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>vel : list<br ALIGN="LEFT"/>|draw(screen)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"player.Player" [color="black", fontcolor="black", label=<{Player|alive : bool<br ALIGN="LEFT"/>allow_damage : int<br ALIGN="LEFT"/>blood : int<br ALIGN="LEFT"/>color : tuple<br ALIGN="LEFT"/>damage_cooldown : int<br ALIGN="LEFT"/>damage_time : int<br ALIGN="LEFT"/>damaged : int<br ALIGN="LEFT"/>dash_cooldown : int<br ALIGN="LEFT"/>dash_direction : list<br ALIGN="LEFT"/>dash_duration : int<br ALIGN="LEFT"/>dash_speed : int<br ALIGN="LEFT"/>dash_speed_multiplier : float<br ALIGN="LEFT"/>dash_start_time : int<br ALIGN="LEFT"/>dash_vector : list<br ALIGN="LEFT"/>dashing : bool<br ALIGN="LEFT"/>last_dash_time : int<br ALIGN="LEFT"/>rect<br ALIGN="LEFT"/>speed : int<br ALIGN="LEFT"/>|draw(screen)<br ALIGN="LEFT"/>update(keys)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"obstacle.RingObstacle" [color="black", fontcolor="black", label=<{RingObstacle|alpha : int<br ALIGN="LEFT"/>center_pos<br ALIGN="LEFT"/>duration : int<br ALIGN="LEFT"/>expired : bool<br ALIGN="LEFT"/>fade_out : bool<br ALIGN="LEFT"/>max_radius<br ALIGN="LEFT"/>radius : int<br ALIGN="LEFT"/>rect<br ALIGN="LEFT"/>spawn_time<br ALIGN="LEFT"/>thickness : int<br ALIGN="LEFT"/>|collide(player)<br ALIGN="LEFT"/>draw(screen)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"obstacle.SinCircleObstacle" [color="black", fontcolor="black", label=<{SinCircleObstacle|amplitude<br ALIGN="LEFT"/>base_y<br ALIGN="LEFT"/>frequency<br ALIGN="LEFT"/>shake_direction : int<br ALIGN="LEFT"/>start_time<br ALIGN="LEFT"/>|update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"obstacle.SinGearObstacle" [color="black", fontcolor="black", label=<{SinGearObstacle|amplitude<br ALIGN="LEFT"/>base_x<br ALIGN="LEFT"/>base_y<br ALIGN="LEFT"/>frequency<br ALIGN="LEFT"/>rotation<br ALIGN="LEFT"/>start_time<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"obstacle.SinObstacle" [color="black", fontcolor="black", label=<{SinObstacle|amplitude<br ALIGN="LEFT"/>base_y<br ALIGN="LEFT"/>frequency<br ALIGN="LEFT"/>start_time<br ALIGN="LEFT"/>|update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"triangle.Triangle" [color="black", fontcolor="black", label=<{Triangle|angle : int<br ALIGN="LEFT"/>center : list<br ALIGN="LEFT"/>rotation_speed<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>sparkle_start_time<br ALIGN="LEFT"/>vx<br ALIGN="LEFT"/>vy<br ALIGN="LEFT"/>|draw(surface, border_width)<br ALIGN="LEFT"/>get_points()<br ALIGN="LEFT"/>get_rect()<br ALIGN="LEFT"/>update(screen_rect)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"obstacle.CircleObstacle" -> "obstacle.Obstacle" [arrowhead="empty", arrowtail="none"];
"obstacle.FollowCircleObstacle" -> "obstacle.CircleObstacle" [arrowhead="empty", arrowtail="none"];
"obstacle.FollowGearObstacle" -> "obstacle.GearObstacle" [arrowhead="empty", arrowtail="none"];
"obstacle.FollowObstacle" -> "obstacle.Obstacle" [arrowhead="empty", arrowtail="none"];
"obstacle.GearObstacle" -> "obstacle.CircleObstacle" [arrowhead="empty", arrowtail="none"];
"obstacle.LaserCircleObstacle" -> "obstacle.CircleObstacle" [arrowhead="empty", arrowtail="none"];
"obstacle.LaserObstacle" -> "obstacle.Obstacle" [arrowhead="empty", arrowtail="none"];
"obstacle.RingObstacle" -> "obstacle.CircleObstacle" [arrowhead="empty", arrowtail="none"];
"obstacle.SinCircleObstacle" -> "obstacle.CircleObstacle" [arrowhead="empty", arrowtail="none"];
"obstacle.SinGearObstacle" -> "obstacle.GearObstacle" [arrowhead="empty", arrowtail="none"];
"obstacle.SinObstacle" -> "obstacle.Obstacle" [arrowhead="empty", arrowtail="none"];
}
